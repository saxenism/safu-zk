"use strict";(self.webpackChunksafu_zk=self.webpackChunksafu_zk||[]).push([[533],{6799:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"encrypted-qap-evaluations","metadata":{"permalink":"/safu-zk/blog/encrypted-qap-evaluations","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Encrypted QAP Evaluations","description":"+ QAP: Quadratic Arithmetic Programs.","date":"2019-05-29T00:00:00.000Z","tags":[{"label":"security","permalink":"/safu-zk/blog/tags/security"},{"label":"qap","permalink":"/safu-zk/blog/tags/qap"}],"readingTime":5.855,"hasTruncateMarker":true,"authors":[{"name":"Rahul Saxena","title":"Blocksec Researcher","url":"https://twitter.com/saxenism","image_url":"https://pbs.twimg.com/profile_images/1554486619914117126/7QV7CHum_400x400.jpg","imageURL":"https://pbs.twimg.com/profile_images/1554486619914117126/7QV7CHum_400x400.jpg"}],"frontMatter":{"slug":"encrypted-qap-evaluations","title":"Encrypted QAP Evaluations","authors":{"name":"Rahul Saxena","title":"Blocksec Researcher","url":"https://twitter.com/saxenism","image_url":"https://pbs.twimg.com/profile_images/1554486619914117126/7QV7CHum_400x400.jpg","imageURL":"https://pbs.twimg.com/profile_images/1554486619914117126/7QV7CHum_400x400.jpg"},"tags":["security","qap"]},"unlisted":false},"content":"+ QAP: Quadratic Arithmetic Programs.\\n+ QAP is a *system of equations* of univariate polynomials, and their valid solutions result in a single polynomial equality.\\n  + They are quadratic because they have exactly one polynomial multiplication\\n+ QAPs (because of their polynomial equality and the Schwartz-Zippel Lemma) allow ZK-Snarks to be **succinct**.\\n\\n\x3c!--truncate--\x3e\\n\\n# 3.1 What is the process of arriving at QAPs?\\n\\n+ Start with a function logic (from any programming language). The function must be bounded.\\n+ The function logic is converted into a set of polynomial equations via a process called either **flattening** or **arithmetization**.\\n+ Now, using these flattened equations from the step above (which are of the form `k + c = a * b`), we convert all these equations into an R1CS or the Rank-1 Constraint System.\\n  + Given a circuit encoded as a rank 1 constraint system, it is quite possible to create a zk-proof of having a witness, albeit not a succinct one. [Here\'s an article](https://www.rareskills.io/post/r1cs-zkp) on how to do that.\\n+ But since having succinct proofs is kind of important to us, we now convert the R1CS into another form of representation called *QAP*, which when solved correctly, gives us one single **polynomial equality**.\\n  + If that polynomial equality holds true for any random point in our prime field, then we can conclusively (and succinctly) say that the prover indeed knows the solution to the initial function logic.\\n \\n# 3.2 What code does this repo contain?\\n\\nThis repo contains a segment of code that takes an R1CS as an example, converts that into QAP and then solves it to get a single polynomial equality, and then does an evaluation of the two sides of the equality with *encrypted field points*.\\n\\nThat\'s it. \\n\\n## Code Sample\\n\\nThe Python code for this concept is here: \\n\\n```python\\n\\nimport galois\\nimport numpy as np\\nimport math\\nimport random\\nfrom py_ecc.optimized_bn128 import curve_order\\n\\n# Creating a finite field (Galois field) which is basically Fq where q = 967\\nGF_bn128 = galois.GF(curve_order)\\n# print(GF.properties)\\n\\n######################################\\n\\ndef process_array(array):\\n    (rows, columns) = array.shape\\n    for i in range(0, rows):\\n        for j in range(0, columns):\\n            if(math.modf(array[i][j])[0] == 0.0):\\n                if(array[i][j] < 0):\\n                    value = -(int(array[i][j]))\\n                    print(value)\\n                    array[i][j] = GF_bn128(curve_order - value)\\n            else:\\n                raise Exception(\\"Fractional values not allowed in the R1CS arrays over prime field\\", GF_bn128)\\n    return GF_bn128(array)\\n\\n######################################\\n\\nlagrange_x_values = GF_bn128(np.array([1,2,3]))\\n\\n# These are the default R1CS values of L, R, S and W.\\n# Later we can take user inputs to create custom R1CS\\ndefault_L = GF_bn128(np.array([\\n    [0,0,1,0,0,0],\\n    [0,0,0,1,0,0],\\n    [0,0,0,0,0,4]\\n]))\\n\\ndefault_R = GF_bn128(np.array([\\n    [0,0,1,0,0,0],\\n    [0,0,0,1,0,0],\\n    [0,0,1,0,0,0]\\n]))\\n\\n## Cannot do: default_S = process_array(S), because then I get this error message:\\n# ---\x3e 50 default_S = process_array(S)\\n#      52 print(GF_bn128(curve_order-1))\\n#      54 default_W = GF_bn128(np.array([1,199,3,4,9,16]))\\n\\n# /Users/saxenism/Desktop/ZK-Land/QAP-Evaluation-curveOrder.ipynb Cell 1 line 2\\n#      19         value = -(int(array[i][j]))\\n#      20         print(value)\\n# ---\x3e 21         array[i][j] = GF_bn128(curve_order - value)\\n#      22 else:\\n#      23     raise Exception(\\"Fractional values not allowed in the R1CS arrays over prime field\\", GF_bn128)\\n\\n# OverflowError: Python int too large to convert to C long\\n\\n# S = np.array([\\n#     [0,0,0,0,1,0],\\n#     [0,0,0,0,0,1],\\n#     [2,1,0,0,-1,0]\\n# ], dtype=np.int64)\\n\\n# default_S = process_array(S)\\n\\ndefault_S = GF_bn128(np.array([\\n    [0,0,0,0,1,0],\\n    [0,0,0,0,0,1],\\n    [2,1,0,0, GF_bn128(0) - GF_bn128(1) ,0]\\n]))\\n\\ndefault_W = GF_bn128(np.array([1,199,3,4,9,16]))\\n\\n###############################################\\n\\ndef reverse_tuple(tuple):\\n    new_tuple = tuple[::-1]\\n    return new_tuple\\n\\ndef find_num_columns_in_array(arr):\\n    shape_tuple = arr.shape\\n    if(len(shape_tuple) == 2): \\n        return shape_tuple[1]\\n    elif (len(shape_tuple) == 1): \\n        return shape_tuple[0]\\n    else:\\n        raise Exception(\\"Invalid array passed\\")\\n    \\ndef find_num_points_for_lagrange(arr):\\n    shape_tuple = arr.shape\\n    return shape_tuple[0]\\n\\ndef convert_column_to_lagrange_polynomial(array, col_num: int):\\n    required_column = array[ :, col_num: (col_num + 1)].flatten()\\n    col_polynomial = galois.lagrange_poly(lagrange_x_values, required_column)\\n    \\n    if(col_polynomial == 0):\\n        col_polynomial_array = GF_bn128(np.zeros(find_num_points_for_lagrange(array), dtype = int))\\n    elif(col_polynomial.coeffs.size < find_num_points_for_lagrange(array)):\\n        num_zeros_required = find_num_points_for_lagrange(array) - np.asarray(col_polynomial.coeffs).shape[0]\\n        col_polynomial_array = GF_bn128(np.append(np.zeros(num_zeros_required, dtype=int), (np.asarray(col_polynomial.coeffs))))\\n    else:\\n        col_polynomial_array = GF_bn128(np.asarray(col_polynomial.coeffs))\\n    \\n    return col_polynomial_array\\n\\ndef convert_arrays_into_poly_arrays(array):\\n    num_columns = find_num_columns_in_array(array)\\n    for i in range(num_columns):\\n        if(i == 0):\\n            first_arr = convert_column_to_lagrange_polynomial(array, 0)\\n            poly_arrays = GF_bn128(np.array([first_arr]))\\n        else:\\n            poly_arr = convert_column_to_lagrange_polynomial(array, i)\\n            poly_arrays = GF_bn128(np.append(poly_arrays, poly_arr))\\n\\n    required_poly_array_shape = reverse_tuple(array.shape)\\n    return GF_bn128(poly_arrays.reshape(required_poly_array_shape).transpose())\\n\\ndef multiply_poly_arrays_with_witness(array):\\n    return np.matmul(array, default_W)\\n\\n###############################################\\n\\nU = convert_arrays_into_poly_arrays(default_L)\\n# print(U)\\n\\n# print(\\"***********\\")\\n\\nV = convert_arrays_into_poly_arrays(default_R)\\n# print(V)\\n\\n# print(\\"***********\\")\\n\\nW = convert_arrays_into_poly_arrays(default_S)\\n# print(W)\\n\\n# print(\\"***********\\")\\n\\n###############################################\\n\\nUa = multiply_poly_arrays_with_witness(U)\\nVa = multiply_poly_arrays_with_witness(V)\\nWa = multiply_poly_arrays_with_witness(W)\\n\\n# print(Ua)\\n# print(\\"***********\\")\\n# print(Va)\\n# print(\\"***********\\")\\n# print(Wa)\\n\\n###############################################\\n## Introducing t(x) and h(x)\\n\\ndef negateGF967(num):\\n    return GF_bn128(0) - GF_bn128(num)\\n\\na = galois.Poly(Ua, GF_bn128)\\nb = galois.Poly(Va, GF_bn128)\\nc = galois.Poly(Wa, GF_bn128)\\nt = galois.Poly(GF_bn128(np.array([1, negateGF967(1)])), GF_bn128) * galois.Poly(GF_bn128(np.array([1, negateGF967(2)])), GF_bn128) * galois.Poly(GF_bn128(np.array([1, negateGF967(3)])), GF_bn128)\\n\\nprint(\\"a: \\", a)\\nprint(\\"b: \\", b)\\nprint(\\"c: \\", c)\\nprint(\\"t: \\", t)\\n\\nh = ((a * b) - c ) // t\\n\\nprint(\\"h: \\", h) \\n\\n############################################################################################################\\n## Introducing tau\\n## Assume this is generated in a trusted setup and both the prover and verifier are unaware of it\'s value\\n\\ntau = random.randrange(1000)\\nprint(\\"Tau: \\", tau)\\n\\n## Non-encrypted evaluation\\n\\nLHS = a(tau) * b(tau)\\nprint(LHS)\\n\\nRHS = c(tau) + h(tau) * t(tau)\\nprint(RHS)\\n\\nif(LHS == RHS):\\n    print(\\"Congratulations!!\\")\\nelse:\\n    print(\\"Lmeow, fuck you, you cheat!!\\")\\n\\n######################################\\n```\\n\\n> a:  10944121435919637611123202872628637544274182200208017171849102093287904247838x^2 + 10944121435919637611123202872628637544274182200208017171849102093287904247721x + 61\\n\\n> b:  21888242871839275222246405745257275088548364400416034343698204186575808495616x^2 + 4x\\n\\n> c:  10944121435919637611123202872628637544274182200208017171849102093287904247893x^2 + 10944121435919637611123202872628637544274182200208017171849102093287904247562x + 171\\n\\n> t:  x^3 + 21888242871839275222246405745257275088548364400416034343698204186575808495611x^2 + 11x + 21888242871839275222246405745257275088548364400416034343698204186575808495611\\n\\n> h:  10944121435919637611123202872628637544274182200208017171849102093287904247779x + 10944121435919637611123202872628637544274182200208017171849102093287904247837\\n\\n> Tau:  547\\n\\n> 21888242871839275222246405745257275088548364400416034343698204183968301531473\\n\\n> 21888242871839275222246405745257275088548364400416034343698204183968301531473\\n\\n> Congratulations!!\\n\\n\\n```python\\n\\n###############################################################################\\n## Encrypted Polynomial Evaluation in the prime field of bn128.curve_order\\n\\nfrom py_ecc.bn128 import G1, G2, pairing, multiply, add, eq\\n\\ntau_encrypted = random.randrange(1, 100000000000000000000000000)\\nprint(tau_encrypted)\\n\\ntau0 = tau ** 0\\ntau1 = tau ** 1\\ntau2 = tau ** 2\\n\\ntau_0_g1 = multiply(G1, tau0)\\ntau_1_g1 = multiply(G1, tau1)\\ntau_2_g1 = multiply(G1, tau2)\\n\\ntau_0_g2 = multiply(G2, tau0)\\ntau_1_g2 = multiply(G2, tau1)\\ntau_2_g2 = multiply(G2, tau2)\\n\\nencrypted_g1_points = [tau_2_g1, tau_1_g1, tau_0_g1]\\nencrypted_g2_points = [tau_2_g2, tau_1_g2, tau_0_g2]\\n \\n\\nprint(a.coeffs)\\na1 = multiply(encrypted_g1_points[0], int(a.coeffs[0]))\\na2 = multiply(encrypted_g1_points[1], int(a.coeffs[1]))\\na3 = multiply(encrypted_g1_points[2], int(a.coeffs[2]))\\n\\na_final = add(a1,(add(a2, a3)))\\n\\nprint(a_final)\\n\\n###########################################################\\n## Evaluating polynomial `b` at encrypted tau\\n\\nprint(b.coeffs)\\n\\nb_1 = multiply(encrypted_g2_points[0], int(b.coeffs[0]))\\nb_2 = multiply(encrypted_g2_points[1], int(b.coeffs[1]))\\nb_3 = multiply(encrypted_g2_points[2], int(b.coeffs[2]))\\n\\nif(eq(b_3, None)):\\n    b_final = add(b_1, b_2)\\nelse:\\n    b_final = add(b_1, add(b_2, b_3))\\n\\nprint(b_final)\\n\\nprint(\\"b_1\\", b_1)\\nprint(\\"b_2\\", b_2)\\nprint(\\"b_3\\", b_3)\\n\\n###########################################################\\n## Evaluating polynomial `c` at encrypted tau\\n\\n# print(c.coeffs)\\n\\nc_1 = multiply(encrypted_g1_points[0], int(c.coeffs[0]))\\nc_2 = multiply(encrypted_g1_points[1], int(c.coeffs[1]))\\nc_3 = multiply(encrypted_g1_points[2], int(c.coeffs[2]))\\n\\nc_final = add(c_1, add(c_2, c_3))\\n\\nprint(\\"c_final: \\", c_final)\\n\\n############################################################\\n## Evaluating polynomial h(x)t(x) at encrypted tau\\n\\nprint(t.coeffs)\\nprint(h.coeffs)\\n\\nt_at_tau = t(tau)\\nt_1_mul = GF_bn128(tau1) * GF_bn128(t_at_tau)\\nt_2_mul = GF_bn128(tau0) * GF_bn128(t_at_tau)\\n\\nt_1 = multiply(G1, int(t_1_mul))\\nt_2 = multiply(G1, int(t_2_mul))\\n\\nht_1 = multiply(t_1, int(h.coeffs[0]))\\nht_2 = multiply(t_2, int(h.coeffs[1]))\\n\\nht_final = add(ht_1, ht_2)\\n\\nprint(\\"t(tau): \\", t_at_tau)\\nprint(\\"ht_final: \\", ht_final)\\n\\n###############################################################\\n## Final evaluation: Pairing the two points on either sides\\n\\nc_dash = add(c_final, ht_final)\\n\\nprint(\\"c\' : \\", c_dash)\\n\\n```\\n\\n> 64098027294972518179234673\\n[10944121435919637611123202872628637544274182200208017171849102093287904247838\\n 10944121435919637611123202872628637544274182200208017171849102093287904247721\\n                                                                            61]\\n(12982288392726982225351733373780485305689254297838013319451303210079596783578, 16261839010493893530406620868027587658402847883170388847272802436702387669871)\\n[21888242871839275222246405745257275088548364400416034343698204186575808495616\\n                                                                             4\\n                                                                             0]\\n((2624918335793398345529053758365003078953687144620727900278007499075773378076, 9872959766140685708079948292341132245193835331941928675796282476798647275935), (15431922025551336443033589763904384291514367502664363698964691749909211325746, 16098043668701872279407050851923101510600492530668835269157507645847881738802))\\nb_1 ((19649577061300888939940780794193275465824828961870958541914636727523999438201, 3768478345074449006357664587434914347493158600975026659112591142178159686629), (18313830469704994532222459772222443504291118110844470330138826764916740211001, 509758450745406063879129758787092243819554650630097495311522812294761622502))\\nb_2 ((15970769452536708870740916401890338541924517031822821239345196209789841383918, 5449316838307908179215249249894250109549888881532656454062396660192563597237), (21244656315209568568140611285772764049028070945827395638641193885471330125858, 15985595873672642138325858631843976429366431904744417784226307506893875239283))\\nb_3 None\\nc_final:  (19177336333557498595132631543026208127030130399892452897021262662366838262669, 11641764461004233842885829041226156161721570863901337403351942772341357486103)\\n[                                                                            1\\n 21888242871839275222246405745257275088548364400416034343698204186575808495611\\n                                                                            11\\n 21888242871839275222246405745257275088548364400416034343698204186575808495611]\\n[10944121435919637611123202872628637544274182200208017171849102093287904247779\\n 10944121435919637611123202872628637544274182200208017171849102093287904247837]\\nt(tau):  161878080\\nht_final:  (12307269452436295151632145434317373276742571897603573509766109035423261024818, 17988505353712847376720454893818936984967455726464742763048778279490716367378)\\nc\' :  (16516676921569629377665139289779992181117184088063570412633793975894681375200, 15754197829583917595536324646379356523165302722156868083536031271254773702551)\\n\\n```python\\n######################################################\\n## Final block: Evaluating the polynomial equality\\n\\nlhs = pairing(b_final, a_final)\\nrhs = pairing(G2, c_dash)\\n\\nif(eq(rhs, lhs)):\\n    print(\\"Yayy!! The proof was correct\\")\\nelse:\\n    print(\\"Nope, invalid proof\\")\\n```\\n\\n> Yayy!! The proof was correct"}]}')}}]);